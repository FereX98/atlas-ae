From 20dc740f1f4c39eb0e5a5b560611d95353770830 Mon Sep 17 00:00:00 2001
From: Lei Chen <ls.cat@outlook.com>
Date: Tue, 29 Nov 2022 21:27:55 +0800
Subject: [PATCH 1/2] feat: remove lru maintenance when get/add/set

---
 items.c | 60 ++++++---------------------------------------------------
 1 file changed, 6 insertions(+), 54 deletions(-)

diff --git a/items.c b/items.c
index c526310..03fd800 100644
--- a/items.c
+++ b/items.c
@@ -21,6 +21,7 @@
 #include <unistd.h>
 #include <poll.h>
 
+#pragma GCC diagnostic ignored "-Wunused-function"
 /* Forward Declarations */
 static void item_link_q(item *it);
 static void item_unlink_q(item *it);
@@ -511,7 +512,7 @@ int do_item_link(item *it, const uint32_t hv) {
     /* Allocate a new CAS ID on link. */
     ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
     assoc_insert(it, hv);
-    item_link_q(it);
+    // item_link_q(it);
     refcount_incr(it);
     item_stats_sizes_add(it);
 
@@ -528,7 +529,7 @@ void do_item_unlink(item *it, const uint32_t hv) {
         STATS_UNLOCK();
         item_stats_sizes_remove(it);
         assoc_delete(ITEM_key(it), it->nkey, hv);
-        item_unlink_q(it);
+        // item_unlink_q(it);
         do_item_remove(it);
     }
 }
@@ -562,31 +563,7 @@ void do_item_remove(item *it) {
 /* Bump the last accessed time, or relink if we're in compat mode */
 void do_item_update(item *it) {
     MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
-
-    /* Hits to COLD_LRU immediately move to WARM. */
-    if (settings.lru_segmented) {
-        assert((it->it_flags & ITEM_SLABBED) == 0);
-        if ((it->it_flags & ITEM_LINKED) != 0) {
-            if (ITEM_lruid(it) == COLD_LRU && (it->it_flags & ITEM_ACTIVE)) {
-                it->time = current_time;
-                item_unlink_q(it);
-                it->slabs_clsid = ITEM_clsid(it);
-                it->slabs_clsid |= WARM_LRU;
-                it->it_flags &= ~ITEM_ACTIVE;
-                item_link_q_warm(it);
-            } else {
-                it->time = current_time;
-            }
-        }
-    } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
-        assert((it->it_flags & ITEM_SLABBED) == 0);
-
-        if ((it->it_flags & ITEM_LINKED) != 0) {
-            it->time = current_time;
-            item_unlink_q(it);
-            item_link_q(it);
-        }
-    }
+    /* do nothing now */
 }
 
 int do_item_replace(item *it, item *new_it, const uint32_t hv) {
@@ -1041,9 +1018,6 @@ item *do_item_get(const char *key, const size_t nkey, const uint32_t hv, conn *c
             }
             was_found = 3;
         } else {
-            if (do_update) {
-                do_item_bump(c, it, hv);
-            }
             DEBUG_REFCNT(it, '+');
         }
     }
@@ -1061,30 +1035,8 @@ item *do_item_get(const char *key, const size_t nkey, const uint32_t hv, conn *c
 // Split out of do_item_get() to allow mget functions to look through header
 // data before losing state modified via the bump function.
 void do_item_bump(conn *c, item *it, const uint32_t hv) {
-    /* We update the hit markers only during fetches.
-     * An item needs to be hit twice overall to be considered
-     * ACTIVE, but only needs a single hit to maintain activity
-     * afterward.
-     * FETCHED tells if an item has ever been active.
-     */
-    if (settings.lru_segmented) {
-        if ((it->it_flags & ITEM_ACTIVE) == 0) {
-            if ((it->it_flags & ITEM_FETCHED) == 0) {
-                it->it_flags |= ITEM_FETCHED;
-            } else {
-                it->it_flags |= ITEM_ACTIVE;
-                if (ITEM_lruid(it) != COLD_LRU) {
-                    it->time = current_time; // only need to bump time.
-                } else if (!lru_bump_async(c->thread->lru_bump_buf, it, hv)) {
-                    // add flag before async bump to avoid race.
-                    it->it_flags &= ~ITEM_ACTIVE;
-                }
-            }
-        }
-    } else {
-        it->it_flags |= ITEM_FETCHED;
-        do_item_update(it);
-    }
+    fprintf(stderr, "The LRU has been disabled. This function should not be called.\n");
+    abort();
 }
 
 item *do_item_touch(const char *key, size_t nkey, uint32_t exptime,
-- 
2.25.1

