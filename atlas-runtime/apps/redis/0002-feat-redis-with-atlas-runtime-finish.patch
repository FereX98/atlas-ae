From eab813447bff9349f26b80cf624a74af18671d1e Mon Sep 17 00:00:00 2001
From: Lei Chen <ls.cat@outlook.com>
Date: Fri, 25 Nov 2022 19:18:09 +0800
Subject: [PATCH 2/4] feat: redis with atlas runtime finish

---
 src/db.c         | 16 ++++++++--------
 src/networking.c |  2 +-
 src/object.c     |  4 ++--
 src/rdb.c        |  2 +-
 src/server.c     | 12 +++++++-----
 src/t_string.c   |  4 ++--
 6 files changed, 21 insertions(+), 19 deletions(-)

diff --git a/src/db.c b/src/db.c
index 3ccd1bee7..75490d777 100644
--- a/src/db.c
+++ b/src/db.c
@@ -125,7 +125,7 @@ robj *lookupKey(redisDb *db, robj *key, int flags) {
         if (!(flags & (LOOKUP_NOSTATS | LOOKUP_WRITE)))
             server.stat_keyspace_hits++;
         /* TODO: Use separate hits stats for WRITE */
-        serverLog(LL_NOTICE,"get val refcnt %d\n", val->refcount); 
+        // serverLog(LL_NOTICE,"get val refcnt %d\n", val->refcount); 
     } else {
         if (!(flags & (LOOKUP_NONOTIFY | LOOKUP_WRITE)))
             notifyKeyspaceEvent(NOTIFY_KEY_MISS, "keymiss", key, db->id);
@@ -192,10 +192,10 @@ void dbAdd(redisDb *db, robj *key, robj *val) {
     dictEntry *de = dictAddRaw(db->dict, copy, NULL);
     serverAssertWithInfo(NULL, key, de != NULL);
     dictSetVal(db->dict, de, val);
-    if((db->dict)->type->valDup)
-        serverLog(LL_NOTICE,"val dup\n");
-    else
-        serverLog(LL_NOTICE,"no val dup\n");
+    // if((db->dict)->type->valDup)
+    //     serverLog(LL_NOTICE,"val dup\n");
+    // else
+    //     serverLog(LL_NOTICE,"no val dup\n");
     signalKeyAsReady(db, key, val->type);
     if (server.cluster_enabled) slotToKeyAddEntry(de, db);
     notifyKeyspaceEvent(NOTIFY_NEW,"new",key,db->id);
@@ -266,9 +266,9 @@ void dbOverwrite(redisDb *db, robj *key, robj *val) {
  * in a context where there is no clear client performing the operation. */
 void setKey(client *c, redisDb *db, robj *key, robj *val, int flags) {
     int keyfound = 0;
-    atlas_unique_ptr up = atlas_make_unique_ptr(val, 1);
-    serverLog(LL_NOTICE,"SET KEY, flag & exist %d, doenot %d, up handle %lx\n",
-        flags & SETKEY_ALREADY_EXIST, !(flags & SETKEY_DOESNT_EXIST), up.handle);
+    // atlas_unique_ptr up = atlas_make_unique_ptr(val, 1);
+    // serverLog(LL_NOTICE,"SET KEY, flag & exist %d, doenot %d, up handle %lx\n",
+    //     flags & SETKEY_ALREADY_EXIST, !(flags & SETKEY_DOESNT_EXIST), up.handle);
 
     if (flags & SETKEY_ALREADY_EXIST)
         keyfound = 1;
diff --git a/src/networking.c b/src/networking.c
index 3a22d95d8..495dfb418 100644
--- a/src/networking.c
+++ b/src/networking.c
@@ -408,7 +408,7 @@ void addReply(client *c, robj *obj) {
 
     if (sdsEncodedObject(obj)) {
         if(sdsRawEncodedObject(obj) && is_atlas_ptr(obj->ptr)){
-            serverLog(LL_NOTICE,"atlas add reply %p\n", (void*)obj);
+            // serverLog(LL_NOTICE,"atlas add reply %p\n", (void*)obj);
             atlas_unique_ptr_wh* up = (atlas_unique_ptr_wh*)&obj->ptr;
             void *ptr = atlas_upwh_deref_get(up);
             _addReplyToBufferOrList(c,ptr,sdslen(ptr));
diff --git a/src/object.c b/src/object.c
index f138b8778..ad3891dc9 100644
--- a/src/object.c
+++ b/src/object.c
@@ -291,7 +291,7 @@ robj *createModuleObject(moduleType *mt, void *value) {
 void freeStringObject(robj *o) {
     if (o->encoding == OBJ_ENCODING_RAW) {
         if(is_atlas_ptr(o->ptr)){
-            serverLog(LL_NOTICE,"free atlas ptr %p\n", o->ptr); 
+            // serverLog(LL_NOTICE,"free atlas ptr %p\n", o->ptr); 
             return;
         }
         sdsfree(o->ptr);
@@ -774,7 +774,7 @@ int equalStringObjects(robj *a, robj *b) {
 
 size_t stringObjectLen(robj *o) {
     serverAssertWithInfo(NULL,o,o->type == OBJ_STRING);
-    serverLog(LL_NOTICE,"strlen %p\n", (void*)o);
+    // serverLog(LL_NOTICE,"strlen %p\n", (void*)o);
     if (sdsEncodedObject(o)) {
         if(sdsRawEncodedObject(o) && is_atlas_ptr(o->ptr)) {
             atlas_unique_ptr_wh* up = (atlas_unique_ptr_wh*)&o->ptr;
diff --git a/src/rdb.c b/src/rdb.c
index a2de3026a..136d3ee1a 100644
--- a/src/rdb.c
+++ b/src/rdb.c
@@ -493,7 +493,7 @@ ssize_t rdbSaveStringObject(rio *rdb, robj *obj) {
         serverAssertWithInfo(NULL,obj,sdsEncodedObject(obj));
 
         if(obj->encoding == OBJ_ENCODING_RAW && is_atlas_ptr(obj->ptr)){
-            serverLog(LL_NOTICE,"atlas save object %p\n", obj->ptr);
+            // serverLog(LL_NOTICE,"atlas save object %p\n", obj->ptr);
             atlas_unique_ptr_wh* up = (atlas_unique_ptr_wh*)&obj->ptr;
             void *ptr = atlas_upwh_deref_get(up);
             size_t res = rdbSaveRawString(rdb,ptr,sdslen(ptr));
diff --git a/src/server.c b/src/server.c
index c9bbc0c8e..c5a920bb6 100644
--- a/src/server.c
+++ b/src/server.c
@@ -1308,11 +1308,13 @@ int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {
                  CONFIG_BGSAVE_RETRY_DELAY ||
                  server.lastbgsave_status == C_OK))
             {
-                serverLog(LL_NOTICE,"%d changes in %d seconds. Saving...",
-                    sp->changes, (int)sp->seconds);
-                rdbSaveInfo rsi, *rsiptr;
-                rsiptr = rdbPopulateSaveInfo(&rsi);
-                rdbSaveBackground(SLAVE_REQ_NONE,server.rdb_filename,rsiptr);
+                // serverLog(LL_NOTICE,"%d changes in %d seconds. Saving...",
+                //     sp->changes, (int)sp->seconds);
+                // rdbSaveInfo rsi, *rsiptr;
+                // rsiptr = rdbPopulateSaveInfo(&rsi);
+                // rdbSaveBackground(SLAVE_REQ_NONE,server.rdb_filename,rsiptr);
+                // serverLog(LL_NOTICE,"%d changes in %d seconds. But with Atlas runtime, we skip saving...",
+                //     sp->changes, (int)sp->seconds);
                 break;
             }
         }
diff --git a/src/t_string.c b/src/t_string.c
index f1f5ce2f9..4aeb7d8d5 100644
--- a/src/t_string.c
+++ b/src/t_string.c
@@ -299,7 +299,7 @@ void setCommand(client *c) {
         /* the total size is sdsalloc(s) + 1 + sdshrdlen(s), 1 for the '\0' char */
         atlas_unique_ptr_wh up = atlas_make_unique_ptr_wh(s, sdsalloc(s) + 1, sdshdrlen(s));
         o->ptr = (void*)up.handle;
-        serverLog(LL_NOTICE,"create atlas up, alloc size %ld, hdrlen %ld\n", sdsalloc(s), sdshdrlen(s));
+        // serverLog(LL_NOTICE,"create atlas up, alloc size %ld, hdrlen %ld\n", sdsalloc(s), sdshdrlen(s));
     }
     c->argv[2] = o;
 
@@ -331,7 +331,7 @@ int getGenericCommand(client *c) {
         return C_ERR;
     }
 
-    serverLog(LL_NOTICE,"atlas obj encoding %d\n", o->encoding);
+    // serverLog(LL_NOTICE,"atlas obj encoding %d\n", o->encoding);
     addReplyBulk(c,o);
     return C_OK;
 }
-- 
2.25.1

