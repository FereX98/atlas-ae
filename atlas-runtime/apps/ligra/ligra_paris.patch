From 55b9dfbe4025e7fbb178888dd0efe17cee2915b1 Mon Sep 17 00:00:00 2001
From: Lei Chen <ls.cat@outlook.com>
Date: Tue, 4 Oct 2022 17:27:08 +0800
Subject: [PATCH] feat: add ligra pagerank app

---
 apps/Makefile    | 10 +++++++++-
 ligra/ligra.h    | 15 ++++++++++++++-
 ligra/parallel.h |  2 ++
 ligra/vertex.h   | 13 ++++++++++++-
 4 files changed, 37 insertions(+), 3 deletions(-)

diff --git a/apps/Makefile b/apps/Makefile
index 819ae7e..66dedbb 100644
--- a/apps/Makefile
+++ b/apps/Makefile
@@ -41,6 +41,14 @@ PCC = g++
 PCFLAGS = -std=c++14 -O3 $(INTT) $(INTE) $(CODE) $(PD) $(MEM)
 endif
 
+ifdef PARIS_PATH
+PARIS_LIB_PATH = $(PARIS_PATH)/build/runtime/lib
+PARIS_INCLUDE_PATH = $(PARIS_PATH)/runtime/include
+
+LIBS = -L$(PARIS_LIB_PATH) -Wl,-rpath=$(PARIS_LIB_PATH) -lparis -pthread
+PCFLAGS += -I$(PARIS_INCLUDE_PATH) -DPARIS
+endif
+
 COMMON= ligra.h graph.h compressedVertex.h vertex.h utils.h IO.h parallel.h gettime.h index_map.h maybe.h sequence.h edgeMap_utils.h binary_search.h quickSort.h blockRadixSort.h transpose.h parseCommandLine.h byte.h byteRLE.h nibble.h byte-pd.h byteRLE-pd.h nibble-pd.h vertexSubset.h encoder.C decoder.C
 
 ALL= encoder decoder BFS BC BellmanFord Components Components-Shortcut Radii PageRank PageRankDelta BFSCC BFS-Bitvector KCore MIS Triangle CF
@@ -48,7 +56,7 @@ ALL= encoder decoder BFS BC BellmanFord Components Components-Shortcut Radii Pag
 all: $(ALL)
 
 % : %.C $(COMMON)
-	$(PCC) $(PCFLAGS) -o $@ $<
+	$(PCC) $(PCFLAGS) -o $@ $< $(LIBS)
 
 $(COMMON):
 	ln -s ../ligra/$@ .
diff --git a/ligra/ligra.h b/ligra/ligra.h
index 4742e6e..b5e59a3 100644
--- a/ligra/ligra.h
+++ b/ligra/ligra.h
@@ -40,6 +40,9 @@
 #include "parseCommandLine.h"
 #include "index_map.h"
 #include "edgeMap_utils.h"
+#ifdef PARIS
+#include <runtime.h>
+#endif
 using namespace std;
 
 //*****START FRAMEWORK*****
@@ -72,7 +75,7 @@ vertexSubsetData<data> edgeMapDense(graph<vertex> GA, VS& vertexSubset, F &f, co
     return vertexSubsetData<data>(n, next);
   } else {
     auto g = get_emdense_nooutput_gen<data>();
-    parallel_for (long v=0; v<n; v++) {
+    parallel_for_48 (long v=0; v<n; v++) {
       if (f.cond(v)) {
         G[v].decodeInNghBreakEarly(v, vertexSubset, f, g, fl & dense_parallel);
       }
@@ -478,6 +481,12 @@ int parallel_main(int argc, char* argv[]) {
   bool mmap = P.getOptionValue("-m");
   //cout << "mmap = " << mmap << endl;
   long rounds = P.getOptionLongValue("-rounds",3);
+
+#ifdef PARIS
+  printf("Running Ligra with Paris runtime\n");
+  runtime_init();
+#endif
+
   if (compressed) {
     if (symmetric) {
 #ifndef HYPER
@@ -547,5 +556,9 @@ int parallel_main(int argc, char* argv[]) {
       G.del();
     }
   }
+
+#ifdef PARIS
+  runtime_exit();
+#endif
 }
 #endif
diff --git a/ligra/parallel.h b/ligra/parallel.h
index 5a9435c..9832134 100644
--- a/ligra/parallel.h
+++ b/ligra/parallel.h
@@ -79,6 +79,7 @@ static void setWorkers(int n) {
 #define parallel_main main
 #define parallel_for _Pragma("omp parallel for") for
 #define parallel_for_1 _Pragma("omp parallel for schedule (static,1)") for
+#define parallel_for_48 _Pragma("omp parallel for schedule (static,48)") for
 #define parallel_for_256 _Pragma("omp parallel for schedule (static,256)") for
 static int getWorkers() { return omp_get_max_threads(); }
 static void setWorkers(int n) { omp_set_num_threads(n); }
@@ -90,6 +91,7 @@ static void setWorkers(int n) { omp_set_num_threads(n); }
 #define parallel_main main
 #define parallel_for for
 #define parallel_for_1 for
+#define parallel_for_48 for
 #define parallel_for_256 for
 #define cilk_for for
 static int getWorkers() { return 1; }
diff --git a/ligra/vertex.h b/ligra/vertex.h
index 7883d81..224b5af 100644
--- a/ligra/vertex.h
+++ b/ligra/vertex.h
@@ -1,6 +1,9 @@
 #ifndef VERTEX_H
 #define VERTEX_H
 #include "vertexSubset.h"
+#ifdef PARIS
+#include <runtime.h>
+#endif
 using namespace std;
 
 namespace decode_uncompressed {
@@ -13,8 +16,16 @@ namespace decode_uncompressed {
   inline void decodeInNghBreakEarly(vertex* v, long v_id, VS& vertexSubset, F &f, G &g, bool parallel = 0) {
     uintE d = v->getInDegree();
     if (!parallel || d < 1000) {
+      uintE *nghs = (uintE*)v->getInNeighbors();
+#ifdef PARIS
+      uintE *nghs_tmp = (uintE*)runtime_fetch(nghs, sizeof(uintE) * d);
+      if(nghs_tmp){
+        v->setInNeighbors((decltype(v->getInNeighbors()))nghs_tmp);
+        nghs = nghs_tmp;
+      }
+#endif
       for (size_t j=0; j<d; j++) {
-        uintE ngh = v->getInNeighbor(j);
+        uintE ngh = nghs[j];
         if (vertexSubset.isIn(ngh)) {
 #ifndef WEIGHTED
           auto m = f.update(ngh, v_id);
-- 
2.25.1

